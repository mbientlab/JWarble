/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.1.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'ivy-publish'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.github.jnr:jnr-ffi:2.1.9'

    // Use TestNG framework, also requires calling test.useTestNG() below
    testImplementation 'org.testng:testng:6.14.3'
}

test {
    // Use TestNG for unit tests
    useTestNG()
    options {
        systemProperties(System.getProperties())
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

task sourcesJar(type: Jar) {
    from sourceSets.main.java
    archiveClassifier = 'sources'
}

def emitVersion() {
    def stdout = new ByteArrayOutputStream()
    exec {
        executable 'git'
        args 'describe', '--long', '--always'
        standardOutput = stdout
    }
    
    def tokens = stdout.toString().replaceAll("-",".").split('\\.')
    return "${tokens[0]}.${tokens[1]}.${tokens[2].toInteger() + tokens[3].toInteger()}"
}

publishing {
    repositories {
        ivy {
            url = properties.getProperty("ivy.repo")
            credentials {
                username properties.getProperty("ivy.repo.username")
                password properties.getProperty("ivy.repo.password")
            }
        }
    }

    publications {
        ivy(IvyPublication) {
            organisation = "com.mbientlab"
            module = "warble"
            revision = emitVersion()

            from components.java
            artifact(sourcesJar) {
                type = 'sources'
                conf = 'compile'
            }
            descriptor.description {
                text = description
            }
        }
    }
}